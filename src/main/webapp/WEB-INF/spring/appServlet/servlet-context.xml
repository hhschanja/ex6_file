<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1"/>
	</beans:bean>
	
	<!-- 다운 받는 횟수가 이동하는 횟수보다 적으니까 0번째 요놈을 먼저해보고 클래스가 없다면 그다음 1번응 2번 3번..이런식으로 순서를 주는거야  -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"></beans:property> <!-- 얘를 먼저 실행하세요 -->	
	</beans:bean>
	
	<beans:bean class="com.choa.file.Download" id="download"> <!-- download객체가 없으니까 객체를 만들어줘야지 그러면 그 안에 생성자 들어가고~ -->
	
	</beans:bean>
	
	<!-- interceptor 실행을 위해 적어줘야지 -->
	<beans:bean class="com.choa.aspect.TestInterceptor" id="testInterceptor"></beans:bean>
	
	<interceptors>
		<interceptor>
			<mapping path="/notice/*"/> <!-- notice관련된놈은 전부다 들어온당 -->
			<mapping path="/freeboard/*"/>
			<beans:ref bean="testInterceptor"/>
		</interceptor>
	</interceptors>
	
	<!-- annotation을 인식해서 객체를 만들어 줄 수 있게 스캔범위를 정해줘야지 -->
	<context:component-scan base-package="com.choa.ex6" />
	<context:component-scan base-package="com.choa.notice" />
	<context:component-scan base-package="com.choa.memo" />												
	<context:component-scan base-package="com.choa.aspect" /> <!-- 공통로직의 주소가 잘못되도 여기에 에러가 뜸... -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- scan의 순서를 보면 루트럴 먼저 갔다가 서블렛을 가는데 aspect 패키지를 먼저 읽고나서 객체름 만든다음에 프록시를 읽어서 @aspect를 찾아야해-->
	
	<context:component-scan base-package="com.choa.table" />
	
</beans:beans>
